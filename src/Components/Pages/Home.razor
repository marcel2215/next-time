@page "/"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ApplicationUserManager UserManager
@inject MeetingManager MeetingManager

<PageTitle>NextTime</PageTitle>

@if (User == null)
{
    <LoadingScreen />
    return;
}

<div class="space-y-4">
    <h1 class="text-5xl sm:text-6xl text-center font-bold">Next<span class="text-amber-500">Time</span></h1>
    <div class="pt-4 space-y-4">
        <h2 class="text-center text-gray-500 font-bold">CREATED BY ME</h2>
        @if (_createdMeetings.Count == 0)
        {
            <p class="text-center text-gray-500">You haven't created any meetings.</p>
        }
        <NTButton Style="ButtonStyle.Accent" Clicked="NavigateToMeetingCreation">Create Meeting</NTButton>
        @if (_createdMeetings.Count >= 1)
        {
            <div class="space-y-2">
                @foreach (var meeting in _createdMeetings)
                {
                    <NTButton Clicked="@(() => NavigateToMeetingDetails(meeting.Code))">@meeting.Title</NTButton>
                }
            </div>
        }
    </div>
    <div class="py-4">
        <div class="w-full h-1 bg-gray-100 rounded-xl" />
    </div>
    <div class="space-y-4">
        <h2 class="text-center text-gray-500 font-bold">SHARED BY OTHERS</h2>
        @if (_sharedMeetings.Count == 0)
        {
            <p class="text-center text-gray-500">You aren't participating in any meetings.</p>
        }
        <div class="space-y-2">
            <NTTextBox Placeholder="https://nexttime.azurewebsites.net/m/abcd1234" @bind-Text="MeetingCode" />
            <NTButton Style="ButtonStyle.Accent" IsDisabled="ValidateMeetingCode() == null" Clicked="JoinMeetingAsync">Join Meeting</NTButton>
            @if (_joinMeetingError != null)
            {
                <p class="text-xs text-red-500">@_joinMeetingError</p>
            }
        </div>
    </div>
    @if (_sharedMeetings.Count >= 1)
    {
        <div class="space-y-2">
            @foreach (var meeting in _sharedMeetings)
            {
                <NTButton Clicked="@(() => NavigateToMeetingDetails(meeting.Code))">@meeting.Title</NTButton>
            }
        </div>
    }
</div>

@code {
    private List<Meeting> _createdMeetings = [];

    private List<Meeting> _sharedMeetings = [];

    private string _meetingCode = string.Empty;

    private string? _joinMeetingError;

    [CascadingParameter]
    public ApplicationUser? User { get; init; }

    private string MeetingCode
    {
        get => _meetingCode;
        set
        {
            _meetingCode = value;
            _joinMeetingError = null;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (User != null)
        {
            _createdMeetings = await UserManager.GetCreatedMeetings(User).ToListAsync();
            _sharedMeetings = await UserManager.GetSharedMeetings(User).ToListAsync();
        }
    }

    private void NavigateToMeetingCreation()
    {
        NavigationManager.NavigateTo("/new-meeting");
    }

    private void NavigateToMeetingDetails(string meetingCode)
    {
        NavigationManager.NavigateTo($"/m/{meetingCode}");
    }

    private string? ValidateMeetingCode()
    {
        var codeInput = _meetingCode.Trim().ToLowerInvariant();
        var indexOfUrlCode = codeInput.IndexOf("m/") + 2;

        if (indexOfUrlCode != 1)
        {
            var indexOfUrlCodeEnd = indexOfUrlCode + 7;
            if (indexOfUrlCodeEnd >= codeInput.Length)
            {
                return null;
            }

            var code = codeInput.Substring(indexOfUrlCode, 8);
            code = new string(code.Where(char.IsLetterOrDigit).ToArray());

            return code.Length == 8 ? code : null;
        }
        else
        {
            var code = new string(codeInput.Where(char.IsLetterOrDigit).ToArray());
            return code.Length == 8 ? code : null;
        }
    }

    private async Task JoinMeetingAsync()
    {
        var code = ValidateMeetingCode();
        if (code == null)
        {
            return;
        }

        var meeting = await MeetingManager.FindByCodeAsync(code);
        if (meeting == null)
        {
            _joinMeetingError = "Meeting not found. Check the code and try again.";
            return;
        }

        NavigateToMeetingDetails(meeting.Code);
    }
}
