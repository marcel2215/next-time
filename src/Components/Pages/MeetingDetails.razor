@page "/m/{meetingCode}"
@inject NavigationManager NavigationManager
@inject MeetingManager MeetingManager
@inject PreferenceManager PreferencesManager
@inject IJSRuntime JSRuntime

@if (_meeting == null || User == null)
{
    <PageTitle>NextTime - Meeting Details</PageTitle>
    <LoadingScreen />
    return;
}

<PageTitle>NextTime - @_meeting.Title</PageTitle>

<div class="text-center space-y-4">
    <div class="flex justify-center">
        <h1 class="font-extrabold hover:scale-105 active:scale-95 transition-all ease-in-out duration-300"><a href="/">NEXT<span class="text-amber-500">TIME</span></a></h1>
    </div>
    <h2 class="text-4xl font-bold break-words">@_meeting.Title</h2>
    <div class="space-x-2 flex justify-center items-center">
        <img src="/img/clock.svg" alt="Clock" height="24" width="24" />
        @if (_meeting.Duration.TotalDays >= 1)
        {
            <p>Entire Day</p>
        }
        else if (_meeting.Duration.TotalHours >= 12)
        {
            <p>Around @(_meeting.Duration.Hours - 4)-@(_meeting.Duration.Hours) Hours</p>
        }
        else if (_meeting.Duration.TotalHours >= 6)
        {
            <p>Around @(_meeting.Duration.Hours - 2)-@(_meeting.Duration.Hours) Hours</p>
        }
        else if (_meeting.Duration.TotalHours >= 3)
        {
            <p>Around @(_meeting.Duration.Hours - 1)-@(_meeting.Duration.Hours) Hours</p>
        }
        else
        {
            <p>Around 1 Hour</p>
        }
    </div>
    @if (!string.IsNullOrWhiteSpace(_meeting.Description))
    {
        <p class="break-words">@_meeting.Description</p>
    }
    <div class="py-4">
        <div class="w-full h-1 bg-gray-100 rounded-xl" />
    </div>
    @if (_numberOfAllUsers >= 1 && _recommendedTime != null)
    {
        <h3 class="text-center text-gray-500 font-bold">RECOMMENDED TIME</h3>
        <p class="text-center text-2xl font-bold">@_recommendedTime.Value.ToString("dddd, dd MMMM HH:mm")</p>
        @if (_numberOfAllUsers == 1)
        {
            <p>Only one participant added their preferences.</p>
        }
        else if (_numberOfMatchedUsers == _numberOfAllUsers)
        {
            <p>All @_numberOfAllUsers participant can take part in the event this time.</p>
        }
        else
        {
            <p>@_numberOfMatchedUsers of @_numberOfAllUsers participants can take part in the event this time.</p>
        }
    }
    else
    {
        <p>No one has suggested a time for this event yet.</p>
    }
    <div class="pt-4">
        <NTButton Style="ButtonStyle.Accent" Clicked="NavigateToPreferenceEdition">
            @if (_hasUserAnyPreferences)
            {
                <span>Edit My Preferences</span>
            }
            else
            {
                <span>Add My Preferences</span>
            }
        </NTButton>
    </div>
    <div class="py-4">
        <div class="w-full h-1 bg-gray-100 rounded-xl" />
    </div>
    <div class="flex space-x-4">
        <button class="w-full p-2 rounded-lg bg-gray-100 hover:bg-gray-200 active:bg-gray-300 border shadow-sm hover:scale-105 active:scale-95 font-bold transition-all ease-in-out duration-300 select-none" onclick="navigator.clipboard.writeText('https://nexttime.azurewebsites.net/m/@_meeting.Code')">Copy Link</button>
        <NTButton Clicked="ShareMeetingLinkAsync">Share Link</NTButton>
    </div>
    @if (User.Id == _meeting.UserId)
    {
        <div class="flex space-x-4">
            <NTButton Clicked="NavigateToEdition">Edit</NTButton>
            <NTButton Style="ButtonStyle.Danger" Clicked="NavigateToDeletion">Delete</NTButton>
        </div>
    }
</div>

@code {
    private Meeting? _meeting;

    private DateTimeOffset? _recommendedTime;

    private int _numberOfAllUsers;

    private int _numberOfMatchedUsers;

    private bool _hasUserAnyPreferences;

    [Parameter]
    public string? MeetingCode { get; set; }

    [CascadingParameter]
    public ApplicationUser? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(MeetingCode) && MeetingCode.Length == 8)
        {
            _meeting = await MeetingManager.FindByCodeAsync(MeetingCode);
        }

        if (_meeting == null || User == null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        _numberOfAllUsers = await MeetingManager.GetPreferences(_meeting.Id).GroupBy(p => p.UserId).CountAsync();
        _hasUserAnyPreferences = await MeetingManager.GetPreferences(_meeting.Id, User.Id).AnyAsync();

        if (_numberOfAllUsers >= 1)
        {
            _recommendedTime = await MeetingManager
            .GetPreferences(_meeting.Id)
            .AsNoTracking()
            .GroupBy(s => s.PreferredTime)
            .OrderByDescending(g => g.Count())
            .Select(g => g.Key)
            .FirstOrDefaultAsync();

            _numberOfMatchedUsers = await MeetingManager.GetPreferences(_meeting.Id).CountAsync(p => p.PreferredTime == _recommendedTime);
        }
    }

    private void NavigateToPreferenceEdition()
    {
        if (_meeting != null)
        {
            NavigationManager.NavigateTo($"/m/{_meeting.Code}/edit-preferences");
        }
    }

    private async Task ShareMeetingLinkAsync()
    {
        if (_meeting != null)
        {
            await JSRuntime.InvokeVoidAsync("shareLink", _meeting.Title, $"/m/{_meeting.Code}");
        }
    }

    private void NavigateToEdition()
    {
        if (_meeting != null && User != null && _meeting.UserId == User.Id)
        {
            NavigationManager.NavigateTo($"/m/{_meeting.Code}/edit");
        }
    }

    private void NavigateToDeletion()
    {
        if (_meeting != null && User != null && _meeting.UserId == User.Id)
        {
            NavigationManager.NavigateTo($"/m/{_meeting.Code}/delete");
        }
    }
}
