@page "/meeting/{id}"
@inject NavigationManager NavigationManager
@inject MeetingManager MeetingManager

@if (Meeting == null)
{
    <p>Meeting not found.</p>
    return;
}

<div class="text-center space-y-4">
    <h1 class="font-extrabold">NEXT<span class="text-amber-500">TIME</span></h1>
    <h2 class="text-4xl font-bold">@Meeting.Title</h2>
    <div class="space-x-2 flex justify-center items-center">
        <img src="/img/clock.svg" alt="Clock" height="24" width="24" />
        @if (Meeting.Duration.TotalDays >= 1)
        {
            <p>Entire Day</p>
        }
        else if (Meeting.Duration.TotalHours > 1)
        {
            <p>Around @(Meeting.Duration.Hours - 2)-@(Meeting.Duration.Hours) Hours</p>
        }
        else
        {
            <p>Around 1 Hour</p>
        }
    </div>
    @if (!string.IsNullOrWhiteSpace(Meeting.Description))
    {
        <p>@Meeting.Description</p>
    }
    <div class="py-4">
        <div class="w-full h-1 bg-gray-100 rounded-xl" />
    </div>
    @if (Declarations.Count == 0)
    {
        <p>No one has suggested a time for this event yet.</p>
    }
    <div class="pt-4">
        <NTButton Style="ButtonStyle.Accent">Create Suggestion</NTButton>
    </div>
</div>

@code {
    [Parameter]
    public string? Id { get; set; }

    private Meeting? Meeting { get; set; }

    private List<Declaration> Declarations { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        if (Guid.TryParse(Id, out var id))
        {
            Meeting = await MeetingManager.FindByIdAsync(id);
        }

        if (Meeting == null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        Declarations = await MeetingManager.GetDeclarations(Meeting).ToListAsync();
    }
}
