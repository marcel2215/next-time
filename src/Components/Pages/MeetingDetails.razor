@page "/m/{meetingId}"
@inject NavigationManager NavigationManager
@inject MeetingManager MeetingManager
@inject DeclarationManager DeclarationManager

@if (_meeting == null || _declarations == null)
{
    <PageTitle>NextTime - Meeting Details</PageTitle>
    <LoadingScreen />
    return;
}

<PageTitle>NextTime - @_meeting.Title</PageTitle>

<div class="text-center space-y-4">
    <h1 class="font-extrabold">NEXT<span class="text-amber-500">TIME</span></h1>
    <h2 class="text-4xl font-bold">@_meeting.Title</h2>
    <div class="space-x-2 flex justify-center items-center">
        <img src="/img/clock.svg" alt="Clock" height="24" width="24" />
        @if (_meeting.Duration.TotalDays >= 1)
        {
            <p>Entire Day</p>
        }
        else if (_meeting.Duration.TotalHours > 1)
        {
            <p>Around @(_meeting.Duration.Hours - 2)-@(_meeting.Duration.Hours) Hours</p>
        }
        else
        {
            <p>Around 1 Hour</p>
        }
    </div>
    @if (!string.IsNullOrWhiteSpace(_meeting.Description))
    {
        <p>@_meeting.Description</p>
    }
    <div class="py-4">
        <div class="w-full h-1 bg-gray-100 rounded-xl" />
    </div>
    @if (_declarations.Count == 0)
    {
        <p>No one has suggested a time for this event yet.</p>
    }
    <div class="pt-4">
        <NTButton Style="ButtonStyle.Accent" Clicked="NavigateToSuggestionCreation">Create Suggestion</NTButton>
    </div>
</div>

@code {
    private Meeting? _meeting;

    private List<Declaration> _declarations = [];

    [Parameter]
    public string? MeetingId { get; set; }

    [CascadingParameter]
    public ApplicationUser? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Guid.TryParse(MeetingId, out var meetingGuid))
        {
            _meeting = await MeetingManager.FindByIdAsync(meetingGuid);
        }

        if (_meeting == null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        _declarations = await MeetingManager.GetDeclarations(_meeting).ToListAsync();
    }

    private async Task NavigateToSuggestionCreation()
    {
        if (_meeting == null || User == null)
        {
            return;
        }

        var declaration = await MeetingManager.GetDeclarationAsync(_meeting, User.Id);
        if (declaration == null)
        {
            declaration = new Declaration(_meeting.Id, User.Id);
            await DeclarationManager.CreateAsync(declaration);
        }

        NavigationManager.NavigateTo($"/d/{declaration.Id}/new-suggestion");
    }
}
