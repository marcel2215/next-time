@if (IsDisabled)
{
    <button class="w-full p-2 rounded-lg bg-gray-50 text-gray-300 border border-gray-100 shadow-sm font-bold cursor-not-allowed select-none" disabled>
        @ChildContent
    </button>
}
else if (IsInProgress)
{
    <button class="flex justify-center w-full p-2 rounded-lg bg-gray-50 border border-gray-100 shadow-sm text-gray-300 font-bold animate-pulse cursor-progress select-none" disabled>
        <img src="/img/loading.gif" height="24" width="24">
    </button>
}
else if (IsSelected)
{
    <button class="w-full p-2 rounded-lg bg-amber-100 hover:bg-amber-200 active:bg-amber-300 border border-amber-200 shadow-sm hover:scale-105 active:scale-95 text-amber-600 hover:text-amber-700 active:text-amber-800 font-bold transition-all ease-in-out duration-300 select-none" @onclick="OnClickHandler">
        @ChildContent
    </button>
}
else
{
    switch (Style)
    {
        case ButtonStyle.Accent:
            {
                <button class="w-full p-2 rounded-lg bg-amber-500 hover:bg-amber-600 active:bg-amber-700 shadow-sm hover:scale-105 active:scale-95 text-white font-bold transition-all ease-in-out duration-300 select-none" @onclick="OnClickHandler">
                    @ChildContent
                </button>
                break;
            }
        default:
            {
                <button class="w-full p-2 rounded-lg bg-gray-100 hover:bg-gray-200 active:bg-gray-300 border shadow-sm hover:scale-105 active:scale-95 font-bold transition-all ease-in-out duration-300 select-none" @onclick="OnClickHandler">
                    @ChildContent
                </button>
                break;
            }
    }
}

@code {
    [Parameter]
    public required RenderFragment ChildContent { get; set; }

    [Parameter]
    public ButtonStyle Style { get; set; }

    [Parameter]
    public bool IsSelected { get; set; }

    [Parameter]
    public bool IsInProgress { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public EventCallback Clicked { get; set; }

    private async Task OnClickHandler()
    {
        if (!IsDisabled && !IsInProgress)
        {
            await Clicked.InvokeAsync();
        }
    }
}
